import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;

class MyData {
  final int id;
  final String title;
  final String body;
  final int userId;

  MyData({
    required this.id,
    required this.title,
    required this.body,
    required this.userId,
  });

  factory MyData.fromJson(Map<String, dynamic> json) {
    return MyData(
      id: json['id'],
      title: json['title'],
      body: json['body'],
      userId: json['userId'],
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'title': title,
      'body': body,
      'userId': userId,
    };
  }
}

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  List<MyData> dataList = [];

  final String apiUrl = 'https://jsonplaceholder.typicode.com/posts';

  Future fetchData() async {
    final response = await http.get(Uri.parse(apiUrl));
    if (response.statusCode == 200) {
      final List<dynamic> responseData = json.decode(response.body);
      setState(() {
        dataList = List<MyData>.from(
          responseData.map((json) => MyData.fromJson(json)),
        );
      });
    } else {
      throw Exception('Failed to load data');
    }
  }

  Future postData(MyData data) async {
    final response = await http.post(
      Uri.parse(apiUrl),
      headers: {'Content-Type': 'application/json'},
      body: json.encode(data.toJson()),
    );
    if (response.statusCode == 201) {
      fetchData();
    } else {
      throw Exception('Failed to add data');
    }
  }

  Future updateData(MyData data) async {
    final response = await http.put(
      Uri.parse('$apiUrl/${data.id}'),
      headers: {'Content-Type': 'application/json'},
      body: json.encode(data.toJson()),
    );
    if (response.statusCode == 200) {
      fetchData();
    } else {
      throw Exception('Failed to update data');
    }
  }

  Future deleteData(int id) async {
    final response = await http.delete(Uri.parse('$apiUrl/$id'));
    if (response.statusCode == 200) {
      fetchData();
    } else {
      throw Exception('Failed to delete data');
    }
  }

  @override
  void initState() {
    super.initState();
    fetchData();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('CRUD App'),
      ),
      body: Column(
        children: [
          Padding(
            padding: const EdgeInsets.all(8.0),
            child: ElevatedButton(
              onPressed: () {
                Navigator.push(
                  context,
                  MaterialPageRoute(
                    builder: (context) => AddDataScreen(
                      onAdd: (newData) {
                        postData(newData);
                      },
                    ),
                  ),
                );
              },
              child: Text('Add Data'),
            ),
          ),
          Expanded(
            child: ListView.builder(
              itemCount: dataList.length,
              itemBuilder: (context, index) {
                return ListTile(
                  title: Text('ID: ${dataList[index].id} - ${dataList[index].title}'),
                  subtitle: Text(dataList[index].body),
                  trailing: Row(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      IconButton(
                        icon: Icon(Icons.edit),
                        onPressed: () {
                          Navigator.push(
                            context,
                            MaterialPageRoute(
                              builder: (context) => UpdateDataScreen(
                                data: dataList[index],
                                onUpdate: (updatedData) {
                                  updateData(updatedData);
                                },
                              ),
                            ),
                          );
                        },
                      ),
                      IconButton(
                        icon: Icon(Icons.delete),
                        onPressed: () {
                          showDeleteConfirmationDialog(dataList[index].id);
                        },
                      ),
                    ],
                  ),
                );
              },
            ),
          ),
        ],
      ),
    );
  }

  Future<void> showDeleteConfirmationDialog(int id) async {
    bool confirmed = await showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text('Delete Data'),
          content: Text('Are you sure you want to delete this item?'),
          actions: [
            TextButton(
              onPressed: () {
                Navigator.of(context).pop(false);
              },
              child: Text('Cancel'),
            ),
            TextButton(
              onPressed: () {
                Navigator.of(context).pop(true);
              },
              child: Text('Delete'),
            ),
          ],
        );
      },
    );

    if (confirmed == true) {
      deleteData(id);
    }
  }
}

class AddDataScreen extends StatelessWidget {
  final Function(MyData) onAdd;
  final TextEditingController _controllerTitle = TextEditingController();
  final TextEditingController _controllerBody = TextEditingController();
  final TextEditingController _controllerUserId = TextEditingController();

  AddDataScreen({required this.onAdd});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Add Data'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            TextField(
              controller: _controllerTitle,
              decoration: InputDecoration(labelText: 'Enter Title'),
            ),
            TextField(
              controller: _controllerBody,
              decoration: InputDecoration(labelText: 'Enter Body'),
            ),
            TextField(
              controller: _controllerUserId,
              decoration: InputDecoration(labelText: 'Enter UserID'),
            ),
            ElevatedButton(
              onPressed: () {
                MyData newData = MyData(
                  id: 0, // You may set a placeholder value or generate it on the server side
                  title: _controllerTitle.text,
                  body: _controllerBody.text,
                  userId: int.tryParse(_controllerUserId.text) ?? 0,
                );
                onAdd(newData);
                Navigator.of(context).pop();
              },
              child: Text('Add Data'),
            ),
          ],
        ),
      ),
    );
  }
}

class UpdateDataScreen extends StatelessWidget {
  final MyData data;
  final Function(MyData) onUpdate;
  final TextEditingController _controllerTitle;
  final TextEditingController _controllerBody;
  final TextEditingController _controllerUserId;

  UpdateDataScreen({required this.data, required this.onUpdate})
      : _controllerTitle = TextEditingController(text: data.title),
        _controllerBody = TextEditingController(text: data.body),
        _controllerUserId = TextEditingController(text: data.userId.toString());

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Update Data'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            TextField(
              controller: _controllerTitle,
              decoration: InputDecoration(labelText: 'Title'),
            ),
            TextField(
              controller: _controllerBody,
              decoration: InputDecoration(labelText: 'Body'),
            ),
            TextField(
              controller: _controllerUserId,
              decoration: InputDecoration(labelText: 'UserID'),
            ),
            ElevatedButton(
              onPressed: () {
                MyData updatedData = MyData(
                  id: data.id,
                  title: _controllerTitle.text,
                  body: _controllerBody.text,
                  userId: int.tryParse(_controllerUserId.text) ?? 0,
                );
                onUpdate(updatedData);
                Navigator.of(context).pop();
              },
              child: Text('Update Data'),
            ),
          ],
        ),
      ),
    );
  }
}
